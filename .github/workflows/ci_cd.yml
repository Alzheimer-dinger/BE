name: CI/CD Pipeline

on:
  push:
    branches: [ develop ] # main
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build Spring Boot JAR
        run: ./gradlew clean build -x test

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/your-app:${{ github.sha }} .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/your-app:${{ github.sha }}
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/your-app:${{ github.sha }} \
                     ${{ secrets.DOCKERHUB_USERNAME }}/your-app:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/your-app:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to GCE via SSH
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VM_SSH_HOST }}
          username: ${{ secrets.VM_SSH_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: 22
          script: |
            set -e

            # 0) 디스크 정리
            docker system prune -af
            docker volume prune -f

            # repo clone / pull
            if [ ! -d /opt/your-app ]; then
              # git clone --branch main https://github.com/Alzheimer-dinger/BE.git /opt/your-app
              git clone --branch develop https://github.com/Alzheimer-dinger/BE.git /opt/your-app
            else
              cd /opt/your-app
              # git pull origin main
              git pull origin develop
            fi
            
            # 작업 디렉토리 이동
            cd /opt/your-app

            # .env 생성
            cat <<EOF > .env
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            
            MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
            MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
            MONGO_DATABASE=${{ secrets.MONGO_DATABASE }}

            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
            MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }}
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}

            REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}

            GRAFANA_ADMIN_USER=${{ secrets.GRAFANA_ADMIN_USER }}
            GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD }}

            KAFKA_BOOTSTRAP_SERVERS=kafka:9092
            FCM_CONFIG_FILENAME=firebase-config.json
            EOF

            # 3) GCP 키 복원 (GCS)
            mkdir -p secret
            cat <<EOF > secret/alzheimerdinger.json
            ${{ secrets.GCP_SA_KEY }}
            EOF

            # 4) Firebase 키 복원 (FCM)
            cat <<EOF > secret/firebase-config.json
            ${{ secrets.FIREBASE_CONFIG }}
            EOF

            # 4) Docker Compose로 배포
            docker-compose pull springboot
            docker-compose up -d --remove-orphans
