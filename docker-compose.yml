services:
  nginx:
    image: nginx:1.25-alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"    # HTTPS를 쓰실 경우
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - springboot
    networks:
      - monitoring-net

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - monitoring-net

  kafka:
    image: confluentinc/cp-kafka:7.4.1
    depends_on: [zookeeper]
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo > /dev/tcp/localhost/9092" ]
      interval: 10s
      retries: 5
    networks:
      - monitoring-net

  mongo:
    image: mongo:6.0
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_INITDB_ROOT_USERNAME}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_INITDB_ROOT_PASSWORD}"
      MONGO_INITDB_DATABASE: "${MONGO_DATABASE}"
    ports:
      - "27017:27017"
    networks:
      - monitoring-net

  mongodb-exporter:
    image: bitnami/mongodb-exporter:latest
    env_file:
      - .env
    environment:
      MONGODB_URI: "mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017/${MONGO_DATABASE}?authSource=admin"
    ports:
      - "9216:9216"
    networks:
      - monitoring-net

  redis:
    image: redis:7.0
    env_file:
      - .env
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}" ]
    ports:
      - "6379:6379"
    networks:
      - monitoring-net

  redis-exporter:
    image: oliver006/redis_exporter:latest
    env_file:
      - .env
    command:
      - "--redis.addr"
      - "redis:6379"
      - "--redis.password"
      - "${REDIS_PASSWORD}"
    ports:
      - "9121:9121"
    networks:
      - monitoring-net

  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    environment:
      KAFKA_SERVER: "kafka:9092"
    ports:
      - "9308:9308"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - monitoring-net

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - monitoring-net

  grafana:
    image: grafana/grafana:latest
    env_file:
      - .env
    environment:
      GF_SECURITY_ADMIN_USER: "${GRAFANA_ADMIN_USER}"
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_ADMIN_PASSWORD}"
    ports:
      - "3000:3000"
    networks:
      - monitoring-net

  mysql:
    image: mysql:8.0
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      MYSQL_DATABASE: "${MYSQL_DATABASE}"
      MYSQL_USER: "${MYSQL_USERNAME}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD}"
    ports:
      - "3306:3306"
    networks:
      - monitoring-net

  springboot:
    image: ${DOCKERHUB_USERNAME}/your-app:latest
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: "jdbc:mysql://mysql:3306/${MYSQL_DATABASE}?useSSL=false&allowPublicKeyRetrieval=true"
      SPRING_DATASOURCE_USERNAME: "${MYSQL_USERNAME}"
      SPRING_DATASOURCE_PASSWORD: "${MYSQL_PASSWORD}"

      SPRING_DATA_REDIS_HOST: "redis"
      SPRING_DATA_REDIS_PORT: "6379"
      SPRING_DATA_REDIS_USERNAME: "${REDIS_USERNAME}"
      SPRING_DATA_REDIS_PASSWORD: "${REDIS_PASSWORD}"

      SPRING_DATA_MONGODB_HOST: "mongo"
      SPRING_DATA_MONGODB_PORT: "27017"
      SPRING_DATA_MONGODB_DATABASE: "${MONGO_DATABASE}"
      SPRING_DATA_MONGODB_USERNAME: "${MONGO_INITDB_ROOT_USERNAME}"
      SPRING_DATA_MONGODB_PASSWORD: "${MONGO_INITDB_ROOT_PASSWORD}"

      GOOGLE_APPLICATION_CREDENTIALS: "/app/secret/alzheimerdinger.json"
    volumes:
      - ./secret/alzheimerdinger.json:/app/secret/alzheimerdinger.json:ro
    ports:
      - "8080:8080"
    depends_on:
      - mysql
      - kafka
      - redis
      - mongo
    networks:
      - monitoring-net

volumes:
  redis-data:
  grafana-storage:
  mysql-data:

networks:
  monitoring-net:
    driver: bridge
